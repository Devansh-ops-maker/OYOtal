// server/controllers/hospitalController.js
const Hospital = require("../models/hospitalModel");

// Helper function to calculate distance using Haversine formula
function haversineDistance(lat1, lon1, lat2, lon2) {
  const toRadians = (degrees) => (degrees * Math.PI) / 180;
  const R = 6371; // Earth's radius in kilometers

  const dLat = toRadians(lat2 - lat1);
  const dLon = toRadians(lon2 - lon1);
  const a =
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(toRadians(lat1)) *
      Math.cos(toRadians(lat2)) *
      Math.sin(dLon / 2) *
      Math.sin(dLon / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c; // Distance in kilometers
}

exports.getNearbyHospitals = async (req, res) => {
  const { lat, lon, radius } = req.query;
  const userLat = parseFloat(lat);
  const userLon = parseFloat(lon);
  const searchRadius = parseFloat(radius);

  try {
    const hospitals = await Hospital.find({});

    // Filter hospitals within the specified radius
    const nearbyHospitals = hospitals.filter((hospital) => {
      const hospitalLat = hospital.location.coordinates[1];
      const hospitalLon = hospital.location.coordinates[0];
      const distance = haversineDistance(userLat, userLon, hospitalLat, hospitalLon);
      return distance <= searchRadius;
    });

    // Add distance to each hospital object
    const hospitalsWithDistance = nearbyHospitals.map((hospital) => ({
      ...hospital._doc,
      distance: haversineDistance(userLat, userLon, hospital.location.coordinates[1], hospital.location.coordinates[0]),
    }));

    res.json(hospitalsWithDistance);
  } catch (error) {
    console.error("Error fetching hospitals:", error);
    res.status(500).json({ error: "Internal server error" });
  }
};
